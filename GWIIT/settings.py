"""
Django settings for GWIIT project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Anchor point to define relative paths for resources like templates, static files, and database files.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-gp9@+*u2^px7x3crj8@ko5wmln*+k%+#ar#c+&@8@*u($d+en6'

# SECURITY WARNING: don't run with debug turned on in production!
# Change to False in production
DEBUG = True

# Adjust in production for domain and IP addresses allowed to access webapp.
#CIDR ranges (192.168.1.0/24) are not supported
ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core', # project-wide utilities
    'authentication', # custom authentication model app
    'authorization', # custom authorization model app
    'organizations', # custom organizations model app
    'sites', # custom organizations model app
    'users', # custom user model app
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'GWIIT.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'GWIIT' / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                # Adds debugging context (e.g., DEBUG value) to templates
                'django.template.context_processors.debug',
                # Provides the request object in templates
                'django.template.context_processors.request',
                # Adds user authentication context (e.g., user object, permissions)
                'django.contrib.auth.context_processors.auth',
                # Adds Django's messaging framework (e.g., success/error messages)
                'django.contrib.messages.context_processors.messages',
                # Adds STATIC_URL for serving static files in templates
                'django.template.context_processors.static',
                # Enables internationalization (e.g., language translation support)
                'django.template.context_processors.i18n',
                # Adds MEDIA_URL for serving user-uploaded files in templates
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'GWIIT.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

'''
# Databases for production build, commented out for testing and demo
DATABASES = {
    # General fallback database
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'default_db',
        'USER': 'default_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    
    'auth_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'auth_db',
        'USER': 'auth_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    
    'authorization_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'authorization_db',
        'USER': 'authorization_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    
    'organizations_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'organizations_db',
        'USER': 'organizations_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    
    'sites_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'sites_db',
        'USER': 'sites_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    },
    
    'users_db': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'users_db',
        'USER': 'users_user',
        'PASSWORD': 'password',
        'HOST': 'localhost',
        'PORT': '5432',
    },
}
'''

DATABASES = {
    # General fallback database
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'default.sqlite3',
    },
    
    'auth_db': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'auth_db.sqlite3',
    },
    
    'authorization_db': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'authorization_db.sqlite3',
    },

    'organizations_db': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'authorization_db.sqlite3',
    },

    'sites_db': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'authorization_db.sqlite3',
    },

    'users_db': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'authorization_db.sqlite3',
    },
}

DATABASE_ROUTERS = ['GWIIT.db_router.DatabaseRouter']

# Redis Cache settings
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        # this references the Redis service
        # adjust if needed
        'LOCATION': 'redis://127.0.0.1:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}

# use Redis as the session engine
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'

# set session expiry
SESSION_COOKIE_AGE = 86400
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_SAVE_EVERY_REQUEST = True

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = '/static/'

STATICFILES_DIRS = [
    BASE_DIR / 'GWIIT' / 'static',
]

# Where static files are collected in production
STATIC_ROOT = BASE_DIR / 'staticfiles'  

# Media files (uploads)
MEDIA_URL = '/media/'
# Where media files are collected in production
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Customer User Model created in 'users' app for login
AUTH_USER_MODEL = 'users.User'

# Auto-load test data in development
import _project_setup.management.commands.add_test_data_loader